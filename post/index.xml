<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Vadim Hleif</title>
    <link>https://vadim-hleif.github.io/post/</link>
    <description>Recent content in Posts on Vadim Hleif</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vadim-hleif.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concurrency in Java</title>
      <link>https://vadim-hleif.github.io/post/concurrency/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vadim-hleif.github.io/post/concurrency/</guid>
      <description>Let&amp;rsquo;s talk about concurrency in java. There are two options to deal with concurrency
 Optimistic lock Pessimistic lock   1. Optimistic lock In this strategy, you will try to save record when previous state of the record as you expected.
Example:
CAS &amp;ndash; compare and swap or compare and set. Processor instruction which guarantees reading, comparing and writing as atomic operation.
variable.cas(expectedValue, newValue) Java has AtomicReference class for objects and also has similar wrappers for many primitives.</description>
    </item>
    
    <item>
      <title>Java Classloaders</title>
      <link>https://vadim-hleif.github.io/post/classloaders/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vadim-hleif.github.io/post/classloaders/</guid>
      <description>Coming soon</description>
    </item>
    
  </channel>
</rss>